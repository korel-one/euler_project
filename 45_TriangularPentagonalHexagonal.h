#pragma once

/*Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.*/

#include <iostream>

bool is_triangle(unsigned long long number) {
	//Tn=n(n+1)/2

	long long tmp = 1 + 8 * number;

	long long sr = (long long)sqrt((double)tmp);
	if (sr*sr == tmp) {
		return (-1 + sr) % 2 == 0;
	}
	return false;
}

bool is_pentagonal(unsigned long long number) {
	//Pn = n(3n−1) / 2

	long long tmp = 24 * number + 1;

	long long sr = (long long)sqrt((double)tmp);
	if (sr*sr == tmp) {
		return (1 + sr) % 6 == 0;
	}

	return false;
}

bool is_hexagonal(unsigned long long number) {
	long long tmp = 1 + 8 * number;

	long long sr = (long long)sqrt((double)tmp);
	if (sr*sr == tmp) {
		return (1 + sr) % 4 == 0;
	}
	return false;
}


void execute_45() {
	for (unsigned long long i = 40756;; ++i) {
	if (is_triangle(i) && is_pentagonal(i) && is_hexagonal(i)){
		std::cout << i << std::endl;
			break;
		}
	}
}