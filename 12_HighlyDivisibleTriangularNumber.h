#pragma once

#include "Factorial.h"

/*The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

	1: 1
	3: 1,3
	6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?*/


int generate_triangle_number(int number) {
	int res = 0;
	while (number >= 1) {
		res += number--;
	}

	std::cout << "triangle_number of (" << number << ") = " << res << std::endl;
	return res;
}

void triangle_number(int number, int curr_number, unsigned int& o_triangle_number) {
	if (number == curr_number)
	{
		o_triangle_number += number;
		return;
	}
	
	o_triangle_number += curr_number;
	triangle_number(number, curr_number + 1, o_triangle_number);
}

#include <map>

int prime_factors_of(int num_div) {

	int d = 1;
	int n2;
	for (int num = 1; d <= 500; num++) {
		int number = num*(num + 1) / 2;// = 1 + 2 + 3 + ... + num
		n2 = number;
		std::map<int, int> degrees_of;

		int curr_prime_factor = 2;
		while (number % curr_prime_factor == 0) {
			++degrees_of[curr_prime_factor];
			number /= curr_prime_factor;
		}

		for (curr_prime_factor = 3; curr_prime_factor*curr_prime_factor <= number; curr_prime_factor += 2)//odd
		{
			while (number%curr_prime_factor == 0) {
				++degrees_of[curr_prime_factor];
				number /= curr_prime_factor;
			}
		}

		if (number != 1)
			++degrees_of[number];

		d = 1;
		for (auto& data : degrees_of) {
			d *= (data.second + 1);
		}
	}

	//


	//
	std::cout << n2 << std::endl;
	return n2;
}

unsigned int triangle_number_of(int divisors_n) {
	int curr_tn = 28, tn_order = 7, curr_divisors_n = 0;

	while (curr_divisors_n < divisors_n){
		curr_tn += (tn_order + 1);
		curr_divisors_n = prime_factors_of(curr_tn);
	}

	return curr_tn;
}
